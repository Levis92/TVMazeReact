import Head from "next/head";
import { useSearchShows } from "@/adapters";
import { ErrorStatus, Loading, SearchInput, ShowCard } from "@/components";
import { Container, List, Stack, styled } from "@mui/material";
import { useUrlQueryParam } from "@/util";

export default function Home() {
  const [search, setSearch] = useUrlQueryParam("search");
  const {
    data: shows,
    isError,
    isPreviousData,
    fetchStatus,
    refetch,
  } = useSearchShows(search);

  const refresh = () => refetch();

  return (
    <>
      <Head>
        <title>Search | TV Maze</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Container maxWidth="md" sx={{ height: "100%", paddingTop: 4 }}>
        <Stack display="grid" gap={1} height="100%">
          <SearchInput
            onSearch={setSearch}
            searchedValue={search}
            resultCount={shows?.length}
            sx={{ position: "sticky" }}
          />
          <SearchResultContainer loading={isPreviousData && fetchStatus === "fetching"}>
            {!shows && fetchStatus === "fetching" && (
              <Loading />
            )}
            {isError && (
              <ErrorStatus onRefresh={refresh} />
            )}
            <Stack component={List} display="grid" gap={1}>
              {shows?.map((response) => (
                <ShowCard
                  key={response.show.id}
                  show={response.show}
                  data-cy="searchResult"
                />
              ))}
            </Stack>
          </SearchResultContainer>
        </Stack>
      </Container>
    </>
  );
}

interface SearchResultContainerProps {
  loading: boolean;
}

const SearchResultContainer = styled("section", {
  shouldForwardProp: (propName) => propName !== "loading",
})<SearchResultContainerProps>(({ theme, loading }) => ({
  overflow: "auto",
  paddingBottom: theme.spacing(2),
  animationName: loading ? "pulse" : undefined,
  animationDuration: "1.5s",
  animationIterationCount: "infinite",
  animationDirection: "alternate",
  animationTimingFunction: "ease-out",
  "@keyframes pulse": {
    from: {
      opacity: 0.6,
    },
    to: {
      opacity: 0.2,
    },
  },
}));
